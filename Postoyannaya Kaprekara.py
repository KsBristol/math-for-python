""" Постоянная Капрекара
Число 6174 имеет следующую особенность. Выберем любое четырёхзначное число n,
больше 1000, в котором не все цифры одинаковы (всюду предполагается
использование десятичной системы счисления, если не оговорено иное).
Расположим цифры сначала в порядке возрастания, затем в порядке убывания.
Вычтем из большего меньшее. Производя перестановки цифр и вычитания, нули
следует сохранять. Описанное действие назовём функцией Капрекара K(n).
Повторяя этот процесс с получающимися разностями, не более чем за семь
шагов получим число 6174, которое будет затем воспроизводить само себя.
Это свойство числа 6174 было открыто в 1949 году индийским математиком
Д. Р. Капрекаром, в честь которого оно и получило своё название.
Для числа 3412:

4321 − 1234 = 3087 →
8730 − 378 = 8352 →
8532 − 2358 = 6174;

Для числа 1100:

1100 − 11 = 1089 →
9810 − 189 = 9621 →
9621 − 1269 = 8352 →
8532 − 2358 = 6174.
Для числа 7641:

7641 − 1467 = 6174.
"""


def numerics(n):
    """
    :param n: принимает на вход одно натуральное число например 3412
    :return: список цифр из которых состоит число [2, 1, 4, 3]
    """
    return [int(x) for x in list(str(n))]


def kaprekar_check(n):
    """
    Функция осуществляющая предварительную проверку числа
    на возможность прохождения Процесса Капрекара для него.
    :param n: принимает на вход одно натуральное число
    :return: логическое значение (True или False)
    True - подходит
    False - не подходит

    Критерии возможности:
    - число 3, 4 или 6 значное
    - не все цифры в числе одинаковые
    - число не равно 100, 1000 или 100 000
    """
    # lst - список из входного числа, который возвращает функция numerics(n)
    lst = numerics(n)
    # проверяет состоит ли число из 3-х,4-х, 6-ти цифр
    if len(lst) == 3 or len(lst) == 4 or len(lst) == 6:
        # определяем что число не состоит из одних и тех же цифр
        if len(set(lst)) != 1:
            # проверяет не равно ли 100, 1000 и 100 000
            if n != 100 and n != 1000 and n != 100000:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def kaprekar_step(L):
    """
    :param L: на вход список натуральных чисел
    (цифр из которых состоит число, проходящее через процесс Капрекара)
     проводит 1 шаг сходимости к постоянной Капрекара [4, 5, 6, 8]
    :return: 4х значное число 4086

    Функция должна сформировать внутри 2 числа:
    - в порядке увеличения цифр в исходном списке
    - в порядке уменьшения цифр в исходном списке
    Вычесть из большего числа меньшее и вернуть результат.
    """

    # в порядке увеличения цифр в исходном списке
    lst_yvel = int(''.join([str(x) for x in sorted(L)]))
    # в порядке уменьшения цифр в исходном списке
    lst_ymen = int(''.join([str(x) for x in sorted(L, reverse=True)]))

    # Вычесть из большего числа меньшее и вернуть результат
    if lst_yvel > lst_ymen:
        return lst_yvel - lst_ymen
    return lst_ymen - lst_yvel


def kaprekar_loop(n):
    """
    "Процесс Капрекара"
    :param n: целое 4х значное число (больше 1000, содержащее хотя бы 2 разные цифры)
    :return: выводит на печать каждое число цикла с новой
    строки до тех пор, пока не будет получено число [495, 6174, 549945, 631764]

    """
    # Число не удовлетворяет условиям процесса Капрекара -
    # выводим сообщение "Ошибка! На вход подано число {}, не
    # удовлетворяющее условиям процесса Капрекара."
    itog = []

    if kaprekar_check(n):
        # Процесс Капрекара сойдётся к постоянной Капрекара (495, 6174, 549945 или 631764)
        # - выводим на печать все числа, начиная с исходного и до постоянной
        # Капрекара, каждое с новой строки
        while n not in [495, 6174, 549945, 631764]:
            if n not in itog:
                itog.append(n)
                print(n)
                n = kaprekar_step(numerics(n))

            else:

                print(f'Следующее число - {n}, кажется процесс зациклился...')
                break
        if n in [495, 6174, 549945, 631764]:
            print(n)


    else:
        print(f'Ошибка! На вход подано число {n}, не удовлетворяющее условиям '
              f'процесса Капрекара')


kaprekar_loop(1000)


# Sample Input 1:
#
# 103304
# Sample Output 1:
#
# 103304
# 431766
# 631764
# Sample Input 2:
#
# 103303
# Sample Output 2:
#
# 103303
# 331767
# 642654
# 420876
# 851742
# 750843
# 840852
# 860832
# 862632
# Следующее число - 642654, кажется процесс зациклился...
# Sample Input 3:
#
# 99
# Sample Output 3:
#
# Ошибка! На вход подано число 99, не удовлетворяющее условиям процесса Капрекара
# Sample Input 4:
#
# 100
# Sample Output 4:
#
# Ошибка! На вход подано число 100, не удовлетворяющее условиям процесса Капрекара
# Sample Input 5:
#
# 9999999999999
# Sample Output 5:
#
# Ошибка! На вход подано число 9999999999999, не удовлетворяющее условиям процесса Капрекара
# Sample Input 6:
#
# 123
# Sample Output 6:
#
# 123
# 198
# 792
# 693
# 594
# 495
# Sample Input 7:
#
# 1234
# Sample Output 7:
#
# 1234
# 3087
# 8352
# 6174
